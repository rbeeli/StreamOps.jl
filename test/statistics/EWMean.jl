@testitem "reset!" begin
    op = EWMean{Float64,Float64}(alpha=0.9, corrected=false)

    op(nothing, 1.0)
    op(nothing, 2.0)

    @test is_valid(op)
    reset!(op)
    @test !is_valid(op)
end

@testitem "alpha=0.9 corrected=false" begin
    using Dates
    
    g = StreamGraph()

    values_data = Tuple{DateTime,Float64}[
        (DateTime(2000, 1, 1), 50.0),
        (DateTime(2000, 1, 2), 1.5),
        (DateTime(2000, 1, 3), 1.1),
        (DateTime(2000, 1, 4), 4.0),
        (DateTime(2000, 1, 5), -3.0),
        (DateTime(2000, 1, 6), 150.0),
        (DateTime(2000, 1, 7), -400.0),
    ]

    values = source!(g, :values, HistoricIterable(Float64, values_data))
    avg = op!(g, :avg, EWMean{Float64,Float64}(alpha=0.9, corrected=false), out=Float64)
    output = sink!(g, :output, Buffer{Float64}())

    bind!(g, values, avg)
    bind!(g, avg, output)

    states = compile_graph!(DateTime, g)
    exe = HistoricExecutor{DateTime}(g, states)
    setup!(exe)

    start = DateTime(2000, 1, 1)
    stop = DateTime(2000, 1, 7)
    run!(exe, start, stop)

    # Reference values generated by pandas, see ./EWMean.py
    expected = [
        50.00000000
        6.35000000
        1.62500000
        3.76250000
        -2.32375000
        134.76762500
        -346.52323750
    ]
    @test output.operation.buffer ≈ expected
end

@testitem "alpha=0.9 corrected=true(default)" begin
    using Dates
    
    g = StreamGraph()

    values_data = Tuple{DateTime,Float64}[
        (DateTime(2000, 1, 1), 50.0),
        (DateTime(2000, 1, 2), 1.5),
        (DateTime(2000, 1, 3), 1.1),
        (DateTime(2000, 1, 4), 4.0),
        (DateTime(2000, 1, 5), -3.0),
        (DateTime(2000, 1, 6), 150.0),
        (DateTime(2000, 1, 7), -400.0),
    ]

    values = source!(g, :values, HistoricIterable(Float64, values_data))
    avg = op!(g, :avg, EWMean{Float64,Float64}(alpha=0.9), out=Float64)
    output = sink!(g, :output, Buffer{Float64}())

    bind!(g, values, avg)
    bind!(g, avg, output)

    states = compile_graph!(DateTime, g)
    exe = HistoricExecutor{DateTime}(g, states)
    setup!(exe)

    start = DateTime(2000, 1, 1)
    stop = DateTime(2000, 1, 7)
    run!(exe, start, stop)

    # Reference values generated by pandas, see ./EWMean.py
    expected = [
        50.00000000
        5.90909091
        1.57657658
        3.75787579
        -2.32427324
        134.76770977
        -346.52327715
    ]
    @test output.operation.buffer ≈ expected
end

@testitem "alpha=0.3 corrected=true(default) (R sample)" begin
    using Dates
    
    g = StreamGraph()

    vals = Float64[1.0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
    values_data = Tuple{DateTime,Float64}[
        (DateTime(2000, 1, i), x)
        for (i, x) in enumerate(vals)
    ]

    values = source!(g, :values, HistoricIterable(Float64, values_data))
    avg = op!(g, :avg, EWMean{Float64,Float64}(alpha=0.3), out=Float64)
    output = sink!(g, :output, Buffer{Float64}())

    bind!(g, values, avg)
    bind!(g, avg, output)

    states = compile_graph!(DateTime, g)
    exe = HistoricExecutor{DateTime}(g, states)
    setup!(exe)

    start = DateTime(2000, 1, 1)
    stop = DateTime(2000, 1, length(vals))
    run!(exe, start, stop)

    # Reference values from R script, see ./EWMean.R
    expected = [
        1, 0.411764705882353, 0.223744292237443, 0.135412554283458, #
        0.0865818037575277, 0.0571439257166366, 0.365385791052037, #
        0.567416735650975, 0.702648817229494, 0.794447250592858, #
        0.857357006849418, 0.596539859754709, 0.415826992743039, #
        0.290227047109354, 0.202743599929962, 0.141717713044793
    ]
    @test output.operation.buffer ≈ expected
end
